<?php

// app/Models/Entity/Todo.php

namespace Models\ORM;

use Symfony\Component\Validator\Mapping\ClassMetadata;
use Forms\Constraints as Assert;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\OptionsResolver\Options;

/**
 * Class - Todo
 * Model for user tasks
 * 
 * @category Model
 * @package  app\Models
 * @author   Sergei Beskorovainyi <bs261257@gmail.com>
 * @license  MIT <http://www.opensource.org/licenses/mit-license.php>
 * @link     http://my.site
 * 
 * @Entity
 * @Table(name="todo")
 */
class Todo {
    
    use \Models\Helper\EntityTrait;

    /**
     * @Id
     * @Column(type="integer")
     * @GeneratedValue(strategy="AUTO")
     */
    protected $id;


    /**
     * @Column(name="`title`", type="string", length=255)
     */
    protected $title;

    /**
     * @Column(name="`task_order`", type="integer")
     */
    protected $task_order;

    /**
     * @Column(name="`done`", type="boolean")
     */
    protected $done;

    //------------------------


    /**
     * Load validator metadata
     * 
     * @param Symfony\Component\Validator\Mapping\ClassMetadata $metadata
     */
    static public function loadValidatorMetadata(ClassMetadata $metadata) {
        $metadata->addPropertyConstraint('title', new Assert\NotBlank());
        $metadata->addPropertyConstraint('task_order', new Assert\Type('int'));
        $metadata->addPropertyConstraint('done', new Assert\Type('boolean'));
    }
    
    /**
     * Configure options for resolver
     * 
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver) {
        //----------------------
        $resolver->setDefaults(array(
            'id' => 0,
            'title' => "Empty task...",
            'task_order' => 1,
            'done' => false
        ));

        $resolver->setRequired(array('id', 'title', 'task_order', 'done'));
        // Set options types
        $resolver->setAllowedTypes('id', 'int');
        $resolver->setAllowedTypes('title', 'string');
        $resolver->setAllowedTypes('task_order', 'int');
        $resolver->setAllowedTypes('done', 'boolean');

        // Normalizer 'title'
        $resolver->setNormalizer('title', function (Options $options, $value) {
        $nValue = $this->app['zend']
                    ->get('filter')
                    ->addFilter($this->app['zend.filter.stringtrim']())
                    ->addFilter($this->app['zend.filter.striptags']())
                    ->filter($value);
            return $nValue;
        });
    }

    
}
